{"version":3,"sources":["../../../src/api/controllers/user.controller.js"],"names":["nodemailer","require","xoauth2","smtpTransport","createTransport","host","port","secure","auth","type","user","clientId","clientSecret","refreshToken","accessToken","signup","req","res","body","name","email","dob","password","schema","joi","object","keys","string","required","date","validate","error","value","details","status","json","User","bcrypt","hashSync","save","result","signin","findOne","title","message","compareSync","token","jwt","sign","expiresIn","reset","undefined","payload","id","_id","secret","data","to","from","text","html","subject","context","url","sendMail","console","log","accessReset","decode","query","uid","resetPass","newPass","findOneAndUpdate","new","then","catch","err"],"mappings":"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","file":"user.controller.js","sourcesContent":["import joi from 'joi';\r\nimport User from \"../models/user.model\";\r\n\r\nimport bcrypt from 'bcryptjs';\r\nimport jwt from 'jsonwebtoken';\r\n const nodemailer = require('nodemailer');\r\nconst xoauth2 = require('xoauth2');\r\n\r\nvar smtpTransport = nodemailer.createTransport({\r\n    host: 'smtp.gmail.com',\r\n    port: 465,\r\n    secure: true,\r\n    auth: {\r\n        type: 'OAuth2',\r\n        user: 'sunny.foru03@gmail.com',\r\n        clientId: '1039591419359-6cmlmfh4d5r47a9331rhcvina2m90pbt.apps.googleusercontent.com',\r\n        clientSecret: 'qyw7cXhcpbi-V1JZR1eOCGSx',\r\n        refreshToken: '1/YsSboZJ4PglpaN36HpLg9YLVPfhzpmDZQ8JVUrvFsrLvtYs37RlNbS_SgR8eaeHV',\r\n        accessToken: 'ya29.GlsbBuE61sUd8uJgx9C57K8BpWx6BRkLc_KuFfdNJ4CEkoTYOTpjL8Xmw18zwafpxGLc6UwWRVXr22rNugmKd1yd95HGi0tdl5l9wWxHYgCckwL9LE8saPY8M7as'\r\n    }\r\n})\r\n\r\n/*************************************Sign up route **************************/\r\n   export default {\r\n    signup(req, res){\r\n        const {name, email, dob, password}= req.body;\r\n        const schema = joi.object().keys({\r\n            name: joi.string().required(),\r\n            email: joi.string().required(),\r\n            dob:joi.date().required(),\r\n            password:joi.string().required()\r\n        })\r\n        const {error, value}=joi.validate(req.body, schema);\r\n        if(error && error.details){\r\n            return res.status(400).json(error);\r\n        }\r\n        var user = new User({\r\n            name: req.body.name,\r\n            email: req.body.email,\r\n            dob: req.body.dob,\r\n            password: bcrypt.hashSync(req.body.password, 10)\r\n        })\r\n        user.save( (error, result)=> {\r\n            if(error){\r\n                return res.status(501).json(error)\r\n            }\r\n            return res.status(201).json(result)\r\n        } )\r\n    },\r\n    signin(req, res){\r\n        User.findOne({email: req.body.email}, (error, user) => {\r\n            if(error){\r\n                return res.status(501).json({\r\n                    title:'an error occured',\r\n                    error: error\r\n                })\r\n            }\r\n            if(!user) {\r\n                return res.status(401).json({\r\n                    title:'login failed!',\r\n                    error: {message: 'invalid login credentials'}\r\n                })\r\n            }\r\n            if(!bcrypt.compareSync(req.body.password,user.password)){\r\n                return res.status(401).json({\r\n                    title:'login failed!',\r\n                    error: {message: 'invalid login credentials'}\r\n                })\r\n            }\r\n        var token = jwt.sign({user: user}, 'secret', {expiresIn: 7200});\r\n        res.status(200).json({\r\n            message:'successfully logged in',\r\n            token: token,\r\n            user:user\r\n        })\r\n            \r\n        })\r\n    },\r\n    reset(req, res){\r\n        if(req.body.email != undefined){\r\n            var email = req.body.email;\r\n            User.findOne({email: email}, (error, user) => {\r\n            if(error){\r\n                return res.status(501).json({\r\n                    title:'an error occured',\r\n                    error: error\r\n                })\r\n            }\r\n            if(!user) {\r\n                return res.status(401).json({\r\n                    title:'no user found with this email address',\r\n                    error: {message: 'invalid login credentials'}\r\n                })\r\n            }\r\n          var payload = {\r\n                id: user._id,\r\n                email:email\r\n            } \r\n             // var secret = user.password + '-' + user.createdAt;\r\n            var secret ='test'\r\n            var token = jwt.sign(payload, secret);\r\n            // console.log(jwt.decode(token))\r\n        var data = {\r\n        to: user.email,\r\n        from: 'user-invoice-builder@gmail.com',\r\n        text: 'text',\r\n        html:`<h1>Hello ${user.name}</h1>\r\n              <span>follow the link to reset your password</span>\r\n              <a href='https://user-invoice-builder.herokuapp.com/forgotpassword/${user._id}/${token}'>click here</a>\r\n        `,\r\n        subject: 'Password help has arrived!',\r\n        context: {\r\n          url: 'https://user-invoice-builder.herokuapp.com/user/reset/'+user._id+'?token='+token,\r\n          name: user.name\r\n        }\r\n      }\r\n      smtpTransport.sendMail(data, function(error) {\r\n        if (!error) {\r\n          return res.json({ message: 'Kindly check your email for further instructions' });\r\n        } else {\r\n            console.log(\"from smtp\", error)\r\n          return res.json({error:error});\r\n        }\r\n      });\r\n            // res.status(200).json({\r\n            //     userId:payload.id,\r\n            //     token:token\r\n            // })  \r\n        })\r\n\r\n        }else {\r\n\r\n        res.status(501).json({title:'Email address is missing.'});\r\n    }\r\n    },\r\n    accessReset(req, res){\r\n        // console.log(req.params.id,req.query.token)\r\n        // var secret = user.password + '-' + user.createdAt;\r\n        var secret ='test'\r\n        var payload = jwt.decode(req.query.token, secret)\r\n\r\n        res.status(200).json({title: 'reset password!', uid:payload.id,token:req.query.token})\r\n    },\r\n    resetPass(req, res){\r\n        if(req.body.token != undefined){\r\n            var id = req.body.uid;\r\n            var newPass = bcrypt.hashSync(req.body.password, 10)\r\n            User.findOneAndUpdate({_id: id},{password:newPass},{new:true})\r\n        .then((user) => res.json({title:'password reset success'}))\r\n        .catch(err => res.status(501).json(err))\r\n    }\r\n        else {\r\n\r\n        res.status(501).json({title:'No token specified.'});\r\n    }\r\n    },\r\n }"]}